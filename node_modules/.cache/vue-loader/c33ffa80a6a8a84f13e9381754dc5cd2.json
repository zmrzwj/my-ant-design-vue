{"remainingRequest":"/Users/zwj/zwj/mygit/battery/html/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zwj/zwj/mygit/battery/html/src/components/g2/test.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zwj/zwj/mygit/battery/html/src/components/g2/test.vue","mtime":1545919506876},{"path":"/Users/zwj/zwj/mygit/battery/html/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zwj/zwj/mygit/battery/html/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zwj/zwj/mygit/battery/html/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zwj/zwj/mygit/battery/html/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\nimport G2 from \"g2\"\n\nG2.track(false);\n\nexport default {\n    name: \"g2\",\n    data(){\n        return {\n        }\n    },\n    mounted:function () {\n        this.$nextTick(function(){  //页面加载完成后执行\n            this.$nextTick(function () {\n                this.draw()\n            })\n        });\n\n    },\n    watch: {\n\n    },\n    methods:{\n        getDocumentWidthHeight:function (id) {\n            var dom = document.getElementById(id);\n            var w = dom.clientWidth;\n            var h = dom.clientHeight;\n\n            var sw = dom.scrollWidth;\n\n            console.log({\n                width:w,\n                height:h,\n                sw:sw\n            });\n\n            console.log(dom);\n\n            return {\n                width:w,\n                height:h\n            }\n        },\n        draw:function () {\n            var _this = this;\n\n            var data = [\n                {genre: 'Sports', sold: 275},\n                {genre: 'Strategy', sold: 115},\n                {genre: 'Action', sold: 120},\n                {genre: 'Shooter', sold: 350},\n                {genre: 'Other', sold: 150},\n            ]; // G2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。\n            // Step 1: 创建 Chart 对象\n            var chart = new G2.Chart({\n                id: 'c1', // 指定图表容器 ID\n                //container: document.getElementById('c1'),\n                //forceFit: true,//自适应\n                forceFit: true,\n                height:_this.getDocumentWidthHeight('c1').height\n            });\n            chart.forceFit();\n            //\n            chart.axis('sold', {\n                line: {\n                    lineWidth: 0, // 设置线的宽度\n                    stroke: 'red', // 设置线的颜色\n                    lineDash: [3, 3] // 设置虚线\n                },\n                tickLine: null\n            });\n\n\n            // Step 2: 载入数据源,定义列信息\n            chart.source(data, {\n                genre: {\n                    alias: '游戏种类' // 列定义，定义该属性显示的别名\n                },\n                sold: {\n                    alias: '销售量'\n                }\n            });\n            chart.forceFit(); // 手动调用自适应函数\n            // Step 3：创建图形语法，绘制柱状图，由 genre 和 sold 两个属性决定图形位置，genre 映射至 x 轴，sold 映射至 y 轴\n            chart.interval().position('genre*sold').color('genre').label('sold')\n            // Step 4: 渲染图表\n            chart.render();\n\n        }\n    }\n}\n\n\n",{"version":3,"sources":["test.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"test.vue","sourceRoot":"src/components/g2","sourcesContent":["<template>\n    <div style=\"position: relative;width: 100%;height: 100%;\">\n        <div id=\"c1\" style=\"width: 100%;height: 100%;\"></div>\n    </div>\n</template>\n\n<script>\n    import G2 from \"g2\"\n\n    G2.track(false);\n\n    export default {\n        name: \"g2\",\n        data(){\n            return {\n            }\n        },\n        mounted:function () {\n            this.$nextTick(function(){  //页面加载完成后执行\n                this.$nextTick(function () {\n                    this.draw()\n                })\n            });\n\n        },\n        watch: {\n\n        },\n        methods:{\n            getDocumentWidthHeight:function (id) {\n                var dom = document.getElementById(id);\n                var w = dom.clientWidth;\n                var h = dom.clientHeight;\n\n                var sw = dom.scrollWidth;\n\n                console.log({\n                    width:w,\n                    height:h,\n                    sw:sw\n                });\n\n                console.log(dom);\n\n                return {\n                    width:w,\n                    height:h\n                }\n            },\n            draw:function () {\n                var _this = this;\n\n                var data = [\n                    {genre: 'Sports', sold: 275},\n                    {genre: 'Strategy', sold: 115},\n                    {genre: 'Action', sold: 120},\n                    {genre: 'Shooter', sold: 350},\n                    {genre: 'Other', sold: 150},\n                ]; // G2 对数据源格式的要求，仅仅是 JSON 数组，数组的每个元素是一个标准 JSON 对象。\n                // Step 1: 创建 Chart 对象\n                var chart = new G2.Chart({\n                    id: 'c1', // 指定图表容器 ID\n                    //container: document.getElementById('c1'),\n                    //forceFit: true,//自适应\n                    forceFit: true,\n                    height:_this.getDocumentWidthHeight('c1').height\n                });\n                chart.forceFit();\n                //\n                chart.axis('sold', {\n                    line: {\n                        lineWidth: 0, // 设置线的宽度\n                        stroke: 'red', // 设置线的颜色\n                        lineDash: [3, 3] // 设置虚线\n                    },\n                    tickLine: null\n                });\n\n\n                // Step 2: 载入数据源,定义列信息\n                chart.source(data, {\n                    genre: {\n                        alias: '游戏种类' // 列定义，定义该属性显示的别名\n                    },\n                    sold: {\n                        alias: '销售量'\n                    }\n                });\n                chart.forceFit(); // 手动调用自适应函数\n                // Step 3：创建图形语法，绘制柱状图，由 genre 和 sold 两个属性决定图形位置，genre 映射至 x 轴，sold 映射至 y 轴\n                chart.interval().position('genre*sold').color('genre').label('sold')\n                // Step 4: 渲染图表\n                chart.render();\n\n            }\n        }\n    }\n\n\n</script>\n\n<style scoped>\n\n</style>"]}]}